<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>myNutritionTracker</title>
    <link rel="stylesheet" href="css/styles.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:200,300"/>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        .tooltip {
            position: absolute;
            background: #fff;
            border: 1px solid #ccc;
            padding: 5px;
            display: none;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
            pointer-events: none; /* Prevents the tooltip from interfering with mouse events */
        }
    </style>
</head>
<body>
    <main id="stats">
        <header>
            <h1 class="header">Your Stats</h1>
            <a href="/premium" title="check out our premium plan!"><img id="crown" src="/icons/crown.png" /></a>
        </header>
    
        <div id="container">
    
            <div class="stats-card" id="WOC">
                <h2>Weekly Overview Cal</h2>
            </div>
    
            <div class="stats-card" id="WOM">
                <h2>Weekly Overview Macros</h2>
                <div>
                    <span id="WOM-p">prot</span>
                    <span id="WOM-f">fats</span>
                    <span id="WOM-c">carbs</span>
                </div>
            </div>

            <div id="streak">
                <div id="current">Current Streak: 0</div>
                <div id="top">Highest Streak: 94</div>
            </div>
    
            <div class="stats-card" id="weight-stat">
                <h2>Weight</h2>
            </div>
    
            <div class="stats-card" id="muscle-stat">
                <h2>Muscle Mass</h2>
            </div>

            <div class="stats-card" id="fat-stat">
                <h2>Body Fat %</h2>
            </div>
    
        </div>
    </main>
    
    <%- include('partials/navbar') %>
    
    <script>
        // Declaring the data

        const user = {
        weight: parseFloat(`<%= info.weight %>`),
        height: parseFloat(`<%= info.height %>`),
        theme: `<%= info.them %>`,
        activity: `<%= info.act %>`,
        gender: `<%= info.gend %>`,
        goal: `<%= info.goa %>`,
        birth: parseInt(`<%= info.birth_year %>`),
        }

        const pallete = {
        // NAME: ['PRIMARY', 'SECONDARY', 'CARD', 'LETTERS', 'NAV', 'BORDER'],
        DARK: ['#2a343cff', '#0073C3', '#333f49', '#ffffff', '#14171f'],
        LIGHT: ['#cccccc', '#0073c3', '#bababa', '#000000', '#333333'],
        BLACK: ['#000000', '#0073c3', '#0f0f0f', '#ffffff', '#171717'],
        BLUE: ['#bbbbbb', '#0073c3', '#999999', '#000000', '#333333'],
        RED: ['#bbbbbb', '#0073c3', '#999999', '#000000', '#333333'],
        GOLD: ['#bbbbbb', '#0073c3', '#999999', '#000000', '#333333'],
        SILVER: ['#bbbbbb', '#0073c3', '#999999', '#000000', '#333333'],
        }

        const root = document.documentElement;
        root.style.setProperty('--primary', pallete[user.theme][0]);
        root.style.setProperty('--blue', pallete[user.theme][1]); // make secondary
        root.style.setProperty('--card', pallete[user.theme][2]);
        root.style.setProperty('--letters', pallete[user.theme][3]);
        root.style.setProperty('--bg', pallete[user.theme][4]);

        const progressData = <%- JSON.stringify(prog) %>;
        
        const weightData = [];
        const muscleData = [];
        const fatData = [];
        progressData.forEach(obj => {
            if (obj.weight) {
                weightData.push({date: new Date(obj.date), y: parseFloat(obj.weight)});
            }
            if (obj.muscle) {
                muscleData.push({date: new Date(obj.date), y: parseFloat(obj.muscle)});
            }
            if (obj.fat) {
                fatData.push({date: new Date(obj.date), y: parseFloat(obj.fat)});
            }
        });


        const calData = [
            {date: new Date(2024, 4, 31), y: 2626},
            {date: new Date(2024, 4, 30), y: 2695},
            {date: new Date(2024, 4, 29), y: 2876},
            {date: new Date(2024, 4, 28), y: 3026},
            {date: new Date(2024, 4, 27), y: 3126},
        ]

        const macrosData = [
            {date: new Date(2024, 5, 1), y: [140, 94, 186]}, // Mon
            {date: new Date(2024, 5, 2), y: [167, 80, 205]}, // Tue
            {date: new Date(2024, 5, 3), y: [198, 87, 257]}, // Wen
            {date: new Date(2024, 5, 4), y: [154, 84, 166]}, // Thu
            {date: new Date(2024, 5, 5), y: [198, 96, 137]}, // Fri
            {date: new Date(2024, 5, 6), y: [131, 89, 172]}, // Sat
            {date: new Date(2024, 5, 7), y: [176, 103, 126]}, // Sun
        ]


        function getCurrentWeek() {
            const now = new Date();
            const dayOfWeek = now.getDay(); // Get the current day of the week (0-6)
            const numDaysFromMonday = (dayOfWeek + 6) % 7; // Calculate how many days have passed since Monday

            const currentMonday = new Date(now);
            currentMonday.setDate(now.getDate() - numDaysFromMonday); // Set to current Monday

            const weekDates = [];
            for (let i = 0; i < 7; i++) {
                const date = new Date(currentMonday);
                date.setDate(currentMonday.getDate() + i); // Add i days to the current Monday
                weekDates.push(date);
            }
            return weekDates;
        }

        function formatDataForCurrentWeek(data) {
            const currentWeek = getCurrentWeek();
            const formattedData = currentWeek.map(date => {
                const dataPoint = data.find(d => new Date(d.date).toDateString() === date.toDateString());
                return {
                    date: date,
                    y: dataPoint ? dataPoint.y : 0 // Use 0 if there's no data for the date
                };
            });
            return formattedData;
        }


        function createBarChart(card, data, color) {
            const formattedData = formatDataForCurrentWeek(data);

            // Calculating y-axis limits with padding
            const yMin = 0;
            const yMax = d3.max(formattedData, d => d.y);
            const yPadding = (yMax - yMin) * 0.1;
            const yDomainMax = yMax + yPadding;

            // Creating SVG Canvas
            const width = 360;
            const height = 150;
            const margin = { top: 0, right: 30, bottom: 40, left: 50 };

            const svg = d3.select(card).append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);

            const innerWidth = width - margin.left - margin.right;
            const innerHeight = height - margin.top - margin.bottom;

            // Creating Scales
            const xScale = d3.scaleBand()
                .domain(formattedData.map(d => d.date))
                .range([0, innerWidth])
                .padding(0.4);

            const yScale = d3.scaleLinear()
                .domain([yMin, yDomainMax])
                .range([innerHeight, 0]);

            // Adding Axes
            const xAxis = d3.axisBottom(xScale).tickFormat(d3.timeFormat("%a"));
            const yAxis = d3.axisLeft(yScale).ticks(4);

            // Adding gridlines
            const xGrid = d3.axisBottom(xScale).tickSize(-innerHeight).tickFormat('');
            const yGrid = d3.axisLeft(yScale).ticks(4).tickSize(-innerWidth).tickFormat('');

            svg.append("g").attr("class", "grid").attr("transform", `translate(0,${innerHeight})`).call(xGrid);
            svg.append("g").attr("class", "grid").call(yGrid);
            svg.append("g").attr("transform", `translate(0,${innerHeight})`).call(xAxis);
            svg.append("g").call(yAxis);

            // Drawing Bars
            svg.selectAll(".bar")
                .data(formattedData)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", d => xScale(d.date))
                .attr("y", d => yScale(d.y))
                .attr("width", xScale.bandwidth())
                .attr("height", d => innerHeight - yScale(d.y))
                .attr("fill", color);

            // Tooltip
            const tooltip = d3.select("body").append("div").attr("class", "tooltip");

            svg.selectAll(".bar")
                .on("click", function (event, d) {
                    tooltip.style("display", "block")
                        .style("left", `${event.pageX + 5}px`)
                        .style("top", `${event.pageY - 28}px`)
                        .style("background", "transparent")
                        .style("border", "none")
                        .html(`${d.y}`);
                })
                .on("mouseout", function () {
                    tooltip.style("display", "none");
                });

            // Styling the gridlines
            d3.selectAll(".grid line").style("stroke", "#e0e0e0").style("stroke-opacity", "0.2").style("shape-rendering", "crispEdges");
        }
        




        function createGroupedBarChart(card, data, colors) {
            // Calculate y-axis limits with padding
            const yMin = 0;
            const yMax = d3.max(data, d => d3.max(d.y));
            const yPadding = (yMax - yMin) * 0.1;
            const yDomainMax = yMax + yPadding;

            // Create SVG Canvas
            const width = 360;
            const height = 150;
            const margin = {top: 0, right: 30, bottom: 40, left: 50};

            const svg = d3.select(card).append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);

            const innerWidth = width - margin.left - margin.right;
            const innerHeight = height - margin.top - margin.bottom;

            // Create Scales
            const x0Scale = d3.scaleBand()
                .domain(data.map(d => d.date))
                .range([0, innerWidth])
                .padding(0.2);

            const x1Scale = d3.scaleBand()
                .domain([0, 1, 2])
                .range([0, x0Scale.bandwidth()])
                .padding(0.1);

            const yScale = d3.scaleLinear()
                .domain([yMin, yDomainMax])
                .range([innerHeight, 0]);

            // Add Axes
            const xAxis = d3.axisBottom(x0Scale).tickFormat(d3.timeFormat("%a"));
            const yAxis = d3.axisLeft(yScale).ticks(4);

            // Add gridlines
            const xGrid = d3.axisBottom(x0Scale).tickSize(-innerHeight).tickFormat('');
            const yGrid = d3.axisLeft(yScale).ticks(4).tickSize(-innerWidth).tickFormat('');

            svg.append("g").attr("class", "grid").attr("transform", `translate(0,${innerHeight})`).call(xGrid);
            svg.append("g").attr("class", "grid").call(yGrid);
            svg.append("g").attr("transform", `translate(0,${innerHeight})`).call(xAxis);
            svg.append("g").call(yAxis);

            // Draw Grouped Bars
            const categories = ["carbs", "protein", "fat"];

            svg.selectAll(".group")
                .data(data)
                .enter().append("g")
                .attr("transform", d => `translate(${x0Scale(d.date)},0)`)
                .selectAll("rect")
                .data(d => d.y.map((value, i) => ({key: i, value: value})))
                .enter().append("rect")
                .attr("x", d => x1Scale(d.key))
                .attr("y", d => yScale(d.value))
                .attr("width", x1Scale.bandwidth())
                .attr("height", d => innerHeight - yScale(d.value))
                .attr("fill", d => colors[d.key]);

            // Tooltip
            const tooltip = d3.select("body").append("div").attr("class", "tooltip");

            svg.selectAll("rect")
                .on("click", function(event, d) {
                    tooltip.style("display", "block")
                        .style("left", `${event.pageX + 5}px`)
                        .style("top", `${event.pageY - 28}px`)
                        .style("background", "#00000040")
                        .style("border", "none")
                        // .style("border-radius","50px")
                        .style("font-size","25px")
                        .style("font-weight","900")
                        .html(`${d.value}`);
                })
                .on("mouseout", function() {
                    tooltip.style("display", "none");
                });

            // Style the gridlines
            d3.selectAll(".grid line").style("stroke", "#e0e0e0").style("stroke-opacity", "0.2").style("shape-rendering", "crispEdges");
        }






        function createLineCraph(card, data, color) {
        
            //Calculating y-axis limits with padding
            const yMin = d3.min(data, d => d.y);
            const yMax = d3.max(data, d => d.y);
            const yPadding = (yMax - yMin) * 0.1;
            const yDomainMin = yMin - yPadding;
            const yDomainMax = yMax + yPadding;

            // Creating SVG Canvas
            const width = 360;
            const height = 140;
            const margin = {top: 0, right: 30, bottom: 30, left: 50};

            const svg = d3.select(card).append("svg").attr("width", width).attr("height", height).append("g").attr("transform", `translate(${margin.left},${margin.top})`);

            const innerWidth = width - margin.left - margin.right;
            const innerHeight = height - margin.top - margin.bottom;

            // Creating Scales
            const now = new Date();
            
            const xScale = d3.scaleTime().domain([new Date().setMonth(now.getMonth() - 12), new Date()]).range([0, innerWidth]);
            const yScale = d3.scaleLinear().domain([yDomainMin, yDomainMax]).range([innerHeight, 0]);

            // Adding Axes
            const xAxis = d3.axisBottom(xScale).ticks(d3.timeMonth.every(1)).tickFormat(d3.timeFormat("%b")); // Only first 3 letters of the month
            const yAxis = d3.axisLeft(yScale).ticks(4); // Display fewer ticks on the y-axis

            // Adding gridlines
            const xGrid = d3.axisBottom(xScale).tickSize(-innerHeight).tickFormat('');
            const yGrid = d3.axisLeft(yScale).ticks(4).tickSize(-innerWidth).tickFormat('');

            svg.append("g").attr("class", "grid").attr("transform", `translate(0,${innerHeight})`).call(xGrid);
            svg.append("g").attr("class", "grid").call(yGrid);
            svg.append("g").attr("transform", `translate(0,${innerHeight})`).call(xAxis);
            svg.append("g").call(yAxis);

            // Drawing line
            const line = d3.line().x(d => xScale(d.date)).y(d => yScale(d.y));//.curve(d3.curveCardinal)
            svg.append("path").datum(data).attr("fill", "none").attr("stroke", color).attr("stroke-width", 2).attr("d", line);

            // Adding Circles and Tooltips
            const tooltip = d3.select("body").append("div").attr("class", "tooltip");

            const formatDate = d3.timeFormat("%b %d");

            svg.selectAll("circle")
                .data(data)
                .enter()
                .append("circle")
                .attr("cx", d => xScale(d.date))
                .attr("cy", d => yScale(d.y))
                .attr("r", 3)
                .attr("fill", color)
                .on("click", function(event, d) {
                    tooltip.style("display", "block")
                        .style("left", `${event.pageX + 5}px`)
                        .style("top", `${event.pageY - 28}px`)
                        .style("background", "transparent")
                        .style("border", "none")
                        .html(`${d.y} <br /> ${formatDate(d.date)}`);
                })
                .on("mouseout", function() {
                    tooltip.style("display", "none");
                });

            // Styling the gridlines
            d3.selectAll(".grid line").style("stroke", "#e0e0e0").style("stroke-opacity", "0.2").style("shape-rendering", "crispEdges");

        }
        





        const colors = ["#384297", "#973892", "#387c97"];
        
        createBarChart("#WOC", calData, "#0073c3");
        createGroupedBarChart('#WOM', macrosData, colors);
        
        createLineCraph('#weight-stat', weightData, '#0073c3');
        createLineCraph('#muscle-stat', muscleData, '#c30000');
        createLineCraph('#fat-stat', fatData, '#c37300');


        </script>
</body>
</html>
