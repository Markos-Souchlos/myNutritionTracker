<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>myNutritionTracker</title>
    <link rel="stylesheet" href="css/styles.css" />
    <link rel="stylesheet" href="https://fonts.googleapis.com/css?family=Source+Sans+Pro:200,300"/>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <style>
        .tooltip {
            position: absolute;
            background: #fff;
            border: 1px solid #ccc;
            padding: 5px;
            display: none;
            box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
            pointer-events: none; /* Prevents the tooltip from interfering with mouse events */
        }
    </style>
</head>
<body>
    <main id="stats">
        <header>
            <h1>Your Stats</h1>
            <a href="/premium" title="check out our premium plan!"><img id="crown" src="/icons/crown.png" /></a>
        </header>
    
        <div id="container">
    
            <div class="stats-card" id="WOC">
                <h2>Weekly Overview Cal</h2>
            </div>
    
            <div class="stats-card" id="WOM">
                <h2>Weekly Overview Macros</h2>
                <div>
                    <span id="WOM-p">prot</span>
                    <span id="WOM-f">fats</span>
                    <span id="WOM-c">carbs</span>
                </div>
            </div>

            <div id="streak">
                <div id="current">Current Streak: 0</div>
                <div id="top">Highest Streak: 94</div>
            </div>
    
            <div class="stats-card" id="weight-stat">
                <h2>Weight</h2>
            </div>
    
            <div class="stats-card" id="muscle-stat">
                <h2>Muscle Mass</h2>
            </div>

            <div class="stats-card" id="fat-stat">
                <h2>Fat Mass</h2>
            </div>
    
        </div>
    </main>
    
    <%- include('partials/navbar') %>
    
    <script>
        // Declaring the data
        const weightData = [
            {date: new Date(2024, 0, 1), y: 80.85}, // January
            {date: new Date(2024, 0, 15), y: 80.56},
            {date: new Date(2024, 1, 1), y: 81.84}, // February
            {date: new Date(2024, 1, 15), y: 81.18},
            {date: new Date(2024, 2, 1), y: 82.43}, // March
            {date: new Date(2024, 2, 15), y: 82.48},
            {date: new Date(2024, 3, 1), y: 81.25}, // April
            {date: new Date(2024, 3, 15), y: 82.27},
            {date: new Date(2024, 4, 1), y: 81.52}, // May
            {date: new Date(2024, 4, 15), y: 81.24},
            {date: new Date(2024, 5, 1), y: 80.76}, // June
        ];

        const muscleData = [
            {date: new Date(2024, 0, 1), y: 58.03}, // January
            {date: new Date(2024, 0, 15), y: 58.23},
            {date: new Date(2024, 1, 1), y: 58.34}, // February
            {date: new Date(2024, 1, 15), y: 58.48},
            {date: new Date(2024, 2, 1), y: 58.43}, // March
            {date: new Date(2024, 2, 15), y: 58.58},
            {date: new Date(2024, 3, 1), y: 58.70}, // April
            {date: new Date(2024, 3, 15), y: 58.87},
            {date: new Date(2024, 4, 1), y: 59.02}, // May
            {date: new Date(2024, 4, 15), y: 59.14},
            {date: new Date(2024, 5, 1), y: 59.26}, // June
        ]

        const fatData = [
            {date: new Date(2024, 0, 1), y: 18.03}, // January
            {date: new Date(2024, 0, 15), y: 18.23},
            {date: new Date(2024, 1, 1), y: 18.34}, // February
            {date: new Date(2024, 1, 15), y: 18.52},
            {date: new Date(2024, 2, 1), y: 18.68}, // March
            {date: new Date(2024, 2, 15), y: 18.78},
            {date: new Date(2024, 3, 4), y: 18.98}, // April
            {date: new Date(2024, 3, 15), y: 19.27},
            {date: new Date(2024, 4, 1), y: 19.42}, // May
            {date: new Date(2024, 4, 15), y: 19.74},
            {date: new Date(2024, 5, 1), y: 19.96}, // June
        ]

        const calData = [
            {date: new Date(2024, 5, 1), y: 2626}, // Mon
            {date: new Date(2024, 5, 2), y: 2695}, // Tue
            {date: new Date(2024, 5, 3), y: 2876}, // Wen
            {date: new Date(2024, 5, 4), y: 3026}, // Thu
            {date: new Date(2024, 5, 5), y: 2464}, // Fri
            {date: new Date(2024, 5, 6), y: 2695}, // Sat
            {date: new Date(2024, 5, 7), y: 2694}, // Sun
        ]

        const macrosData = [
            {date: new Date(2024, 5, 1), y: [140, 94, 186]}, // Mon
            {date: new Date(2024, 5, 2), y: [167, 80, 205]}, // Tue
            {date: new Date(2024, 5, 3), y: [198, 87, 257]}, // Wen
            {date: new Date(2024, 5, 4), y: [154, 84, 166]}, // Thu
            {date: new Date(2024, 5, 5), y: [198, 96, 137]}, // Fri
            {date: new Date(2024, 5, 6), y: [131, 89, 172]}, // Sat
            {date: new Date(2024, 5, 7), y: [176, 103, 126]}, // Sun
        ]




        function createBarChart(card, data, color) {
            // Calculating y-axis limits with padding
            const yMin = 0;
            const yMax = d3.max(data, d => d.y);
            const yPadding = (yMax - yMin) * 0.1;
            const yDomainMax = yMax + yPadding;

            // Creating SVG Canvas
            const width = 360;
            const height = 150;
            const margin = {top: 0, right: 30, bottom: 40, left: 50};

            const svg = d3.select(card).append("svg")
            .attr("width", width + margin.left + margin.right)
            .attr("height", height + margin.top + margin.bottom)
            .append("g")
            .attr("transform", `translate(${margin.left},${margin.top})`);
            
            const innerWidth = width - margin.left - margin.right;
            const innerHeight = height - margin.top - margin.bottom;
            
            // Creatimg Scales
            const xScale = d3.scaleBand()
                .domain(data.map(d => d.date))
                .range([0, innerWidth])
                .padding(0.4);

            const yScale = d3.scaleLinear()
                .domain([yMin, yDomainMax])
                .range([innerHeight, 0]);

                // Adding Axes
                const xAxis = d3.axisBottom(xScale).tickFormat(d3.timeFormat("%a"));
                const yAxis = d3.axisLeft(yScale).ticks(4);
                
                // Adding gridlines
                const xGrid = d3.axisBottom(xScale).tickSize(-innerHeight).tickFormat('');
                const yGrid = d3.axisLeft(yScale).ticks(4).tickSize(-innerWidth).tickFormat('');
                
                svg.append("g").attr("class", "grid").attr("transform", `translate(0,${innerHeight})`).call(xGrid);
                svg.append("g").attr("class", "grid").call(yGrid);
                svg.append("g").attr("transform", `translate(0,${innerHeight})`).call(xAxis);
                svg.append("g").call(yAxis);
                
                // Drawing Bars
                svg.selectAll(".bar")
                .data(data)
                .enter()
                .append("rect")
                .attr("class", "bar")
                .attr("x", d => xScale(d.date))
                .attr("y", d => yScale(d.y))
                .attr("width", xScale.bandwidth())
                .attr("height", d => innerHeight - yScale(d.y))
                .attr("fill", color);
                
                // Tooltip
            const tooltip = d3.select("body").append("div").attr("class", "tooltip");

            svg.selectAll(".bar")
                .on("click", function(event, d) {
                    tooltip.style("display", "block")
                    .style("left", `${event.pageX + 5}px`)
                        .style("top", `${event.pageY - 28}px`)
                        .style("background", "transparent")
                        .style("border", "none")
                        .html(`${d.y}`);
                    })
                .on("mouseout", function() {
                    tooltip.style("display", "none");
                });

            // Styling the gridlines
            d3.selectAll(".grid line").style("stroke", "#e0e0e0").style("stroke-opacity", "0.2").style("shape-rendering", "crispEdges");
        }
        




        function createGroupedBarChart(card, data, colors) {
            // Calculate y-axis limits with padding
            const yMin = 0;
            const yMax = d3.max(data, d => d3.max(d.y));
            const yPadding = (yMax - yMin) * 0.1;
            const yDomainMax = yMax + yPadding;

            // Create SVG Canvas
            const width = 360;
            const height = 150;
            const margin = {top: 0, right: 30, bottom: 40, left: 50};

            const svg = d3.select(card).append("svg")
                .attr("width", width + margin.left + margin.right)
                .attr("height", height + margin.top + margin.bottom)
                .append("g")
                .attr("transform", `translate(${margin.left},${margin.top})`);

            const innerWidth = width - margin.left - margin.right;
            const innerHeight = height - margin.top - margin.bottom;

            // Create Scales
            const x0Scale = d3.scaleBand()
                .domain(data.map(d => d.date))
                .range([0, innerWidth])
                .padding(0.2);

            const x1Scale = d3.scaleBand()
                .domain([0, 1, 2])
                .range([0, x0Scale.bandwidth()])
                .padding(0.1);

            const yScale = d3.scaleLinear()
                .domain([yMin, yDomainMax])
                .range([innerHeight, 0]);

            // Add Axes
            const xAxis = d3.axisBottom(x0Scale).tickFormat(d3.timeFormat("%a"));
            const yAxis = d3.axisLeft(yScale).ticks(4);

            // Add gridlines
            const xGrid = d3.axisBottom(x0Scale).tickSize(-innerHeight).tickFormat('');
            const yGrid = d3.axisLeft(yScale).ticks(4).tickSize(-innerWidth).tickFormat('');

            svg.append("g").attr("class", "grid").attr("transform", `translate(0,${innerHeight})`).call(xGrid);
            svg.append("g").attr("class", "grid").call(yGrid);
            svg.append("g").attr("transform", `translate(0,${innerHeight})`).call(xAxis);
            svg.append("g").call(yAxis);

            // Draw Grouped Bars
            const categories = ["carbs", "protein", "fat"];

            svg.selectAll(".group")
                .data(data)
                .enter().append("g")
                .attr("transform", d => `translate(${x0Scale(d.date)},0)`)
                .selectAll("rect")
                .data(d => d.y.map((value, i) => ({key: i, value: value})))
                .enter().append("rect")
                .attr("x", d => x1Scale(d.key))
                .attr("y", d => yScale(d.value))
                .attr("width", x1Scale.bandwidth())
                .attr("height", d => innerHeight - yScale(d.value))
                .attr("fill", d => colors[d.key]);

            // Tooltip
            const tooltip = d3.select("body").append("div").attr("class", "tooltip");

            svg.selectAll("rect")
                .on("click", function(event, d) {
                    tooltip.style("display", "block")
                        .style("left", `${event.pageX + 5}px`)
                        .style("top", `${event.pageY - 28}px`)
                        .style("background", "#00000040")
                        .style("border", "none")
                        // .style("border-radius","50px")
                        .style("font-size","25px")
                        .style("font-weight","900")
                        .html(`${d.value}`);
                })
                .on("mouseout", function() {
                    tooltip.style("display", "none");
                });

            // Style the gridlines
            d3.selectAll(".grid line").style("stroke", "#e0e0e0").style("stroke-opacity", "0.2").style("shape-rendering", "crispEdges");
        }






        function createLineCraph(card, data, color) {
        
            //Calculating y-axis limits with padding
            const yMin = d3.min(data, d => d.y);
            const yMax = d3.max(data, d => d.y);
            const yPadding = (yMax - yMin) * 0.1;
            const yDomainMin = yMin - yPadding;
            const yDomainMax = yMax + yPadding;

            // Creating SVG Canvas
            const width = 360;
            const height = 140;
            const margin = {top: 0, right: 30, bottom: 30, left: 50};

            const svg = d3.select(card).append("svg").attr("width", width).attr("height", height).append("g").attr("transform", `translate(${margin.left},${margin.top})`);

            const innerWidth = width - margin.left - margin.right;
            const innerHeight = height - margin.top - margin.bottom;

            // Creating Scales
            const xScale = d3.scaleTime().domain([new Date(2024, 0, 1), new Date(2024, 5, 30)]).range([0, innerWidth]);
            const yScale = d3.scaleLinear().domain([yDomainMin, yDomainMax]).range([innerHeight, 0]);

            // Adding Axes
            const xAxis = d3.axisBottom(xScale).ticks(d3.timeMonth.every(1)).tickFormat(d3.timeFormat("%b")); // Only first 3 letters of the month
            const yAxis = d3.axisLeft(yScale).ticks(4); // Display fewer ticks on the y-axis

            // Adding gridlines
            const xGrid = d3.axisBottom(xScale).tickSize(-innerHeight).tickFormat('');
            const yGrid = d3.axisLeft(yScale).ticks(4).tickSize(-innerWidth).tickFormat('');

            svg.append("g").attr("class", "grid").attr("transform", `translate(0,${innerHeight})`).call(xGrid);
            svg.append("g").attr("class", "grid").call(yGrid);
            svg.append("g").attr("transform", `translate(0,${innerHeight})`).call(xAxis);
            svg.append("g").call(yAxis);

            // Drawing curved line
            const line = d3.line().x(d => xScale(d.date)).y(d => yScale(d.y)).curve(d3.curveCatmullRom); // Adding curve
            svg.append("path").datum(data).attr("fill", "none").attr("stroke", color).attr("stroke-width", 3).attr("d", line);

            // Adding Circles and Tooltips
            const tooltip = d3.select("body").append("div").attr("class", "tooltip");

            const formatDate = d3.timeFormat("%b %d");

            svg.selectAll("circle")
                .data(data)
                .enter()
                .append("circle")
                .attr("cx", d => xScale(d.date))
                .attr("cy", d => yScale(d.y))
                .attr("r", 5)
                .attr("fill", color)
                .on("click", function(event, d) {
                    tooltip.style("display", "block")
                        .style("left", `${event.pageX + 5}px`)
                        .style("top", `${event.pageY - 28}px`)
                        .style("background", "transparent")
                        .style("border", "none")
                        .html(`${d.y} <br /> ${formatDate(d.date)}`);
                })
                .on("mouseout", function() {
                    tooltip.style("display", "none");
                });

            // Styling the gridlines
            d3.selectAll(".grid line").style("stroke", "#e0e0e0").style("stroke-opacity", "0.2").style("shape-rendering", "crispEdges");

        }
        





        const colors = ["#384297", "#973892", "#387c97"];
        
        createBarChart("#WOC", calData, "#0073c3");
        createGroupedBarChart('#WOM', macrosData, colors);
        
        createLineCraph('#weight-stat', weightData, '#0073c3');
        createLineCraph('#muscle-stat', muscleData, '#c30000');
        createLineCraph('#fat-stat', fatData, '#c37300');

        </script>
</body>
</html>
